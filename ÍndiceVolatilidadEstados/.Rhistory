sum(table(nl.ordered$SECCION) != 5)
malos <- which((table(nl.ordered$SECCION) != 5) == TRUE)
nl.ordered
nl.ordered$SECCION in malos
nl.ordered$SECCION %in% malos
malos
write.csv(nl.ordered, "nuevo_leon_volatilidad_ordenado.csv", row.names = TRUE)
write.csv(nl.ordered, "nuevo_leon_volatilidad_ordenado.csv", row.names = FALSE)
# Hay algunas secciones que tienen menos eleciones...
sum(table(nl.ordered$SECCION) != 5)
lenght(malos)
length(malos)
nl.ordered[(table(nl.ordered$SECCION) != 5) == TRUE)]
# Las voy a quitar
nl.ordered[(table(nl.ordered$SECCION) != 5) == TRUE),]
# Las voy a quitar
nl.ordered[((table(nl.ordered$SECCION) != 5) == TRUE),]
1:dim(nl.ordered)[1]
nl.ordered$SECCION != paste(malos, collapse = "|")
paste(malos, collapse = "|")
malos <- which((table(nl.ordered$SECCION) != 5) == TRUE)
malos
order(malos)
# Hay algunas secciones que tienen menos eleciones...
sum(table(nl.ordered$SECCION) != 5)
malos
which?}
which?
?which
# Hay algunas secciones que tienen menos eleciones...
dif_5 <- table(nl.ordered$SECCION) != 5
sum(dif_5)
malos <- which((dif_5) == TRUE)
malos
malos <- nl.ordered$SECCION[which((dif_5) == TRUE)]
malos
names(dif_5)
malos <- names(dif_5)[which((dif_5) == TRUE)]
malos
malos <- as.integer(names(dif_5)[which((dif_5) == TRUE)])
malos
nl.ordered$SECCION != paste(malos, collapse = "|")
nl.ordered$SECCION == paste(malos, collapse = "|")
nl.ordered$SECCION == (1|2)
nl.ordered$SECCION == 1|1
nl.ordered$SECCION == 1|2
nl.ordered$SECCION == (1|2)
nl.ordered$SECCION != (1|2)
nl.ordered$SECCION != (1||2)
nl.ordered$SECCION %in% c(1,2)
nl.ordered$SECCION %in% malos
not(nl.ordered$SECCION %in% malos))
not(nl.ordered$SECCION %in% malos)
!(nl.ordered$SECCION %in% malos)
nl.ordered[!(nl.ordered$SECCION %in% malos))]
nl.ordered[!(nl.ordered$SECCION %in% malos)]
nl.ordered[!(nl.ordered$SECCION %in% malos),]
malos
nl.ordered$SECCION %in% malos
# Quitamos las malas
nl.ordered[!(nl.ordered$SECCION %in% malos),]
# Quitamos las malas
nl.ordered[!(nl.ordered$SECCION %in% malos),]
# Quitamos las malas
nl.matrix <- nl.ordered[!(nl.ordered$SECCION %in% malos),]
nl.matr
nl.matrix
View(nl.matrix)
n <- 5
m <- 5
n <- length(nl.matrix)
n <- dim(nl.matrix)[1]
n
n/m
k <- 6
i=1
nl.matrix[i:(i+4), 1:k]
t(nl.matrix[i:(i+4), 1:k])
t(nl.matrix[i:(i+4), 1:k]) %*% w
X <- matrix(0L, nrow = n/m, ncol = k)
x
X
colnames(X) <- names(df)[1:k]
X
names(df)
names(nl.matrix)
names(nl.matrix)[1:k]
x
t(nl.matrix[i:(i+4), 1:k]) %*% w
x <- t(nl.matrix[i:(i+4), 1:k]) %*% w
X[i,] <- t(x)
X
head(X)
rm(df)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in 1:n/m){
x <- t(df[i:(i + num_elec - 1), 1:num_part]) %*% w
X[i,] <- t(x)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
print("hola")
for(i in 1:n/m){
x <- t(df[i:(i + num_elec - 1), 1:num_part]) %*% w
X[i,] <- t(x)
print("hola2")
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
# Le doy mucho m치s peso a la elecci칩n presidencial que a las de diputados y senadores y m치s peso a la m치s reciente
w <- c(.05,.1,.3,.45,.1)
sum(w)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
print("hola")
for(i in 1:n/m){
x <- t(df[i:(i + num_elec - 1), 1:num_part])
print(x)
x <- x %*% w
X[i,] <- t(x)
print("hola2")
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in 1:n/m){
x <- t(df[i:(i + num_elec), 1:num_part])
print(x)
x <- x %*% w
X[i,] <- t(x)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in 1:n/m){
x <- t(df[(1+num_elec*i):num_elec*(i+1), 1:num_part])
# print(x)
z <- x %*% w
X[i,] <- t(z)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in (0:n/m-1)){
x <- t(df[(1+num_elec*i):num_elec*(i+1), 1:num_part])
# print(x)
z <- x %*% w
X[i,] <- t(z)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in (0:n/m-1)){
x <- t(df[(1+num_elec*i):num_elec*(i+1), 1:num_part])
print(x)
z <- x %*% w
X[i,] <- t(z)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
w
x
nl.ordered[(1+num_elec*i):num_elec*(i+1), 1:num_part]
num_part <- 6
nl.ordered[(1+num_elec*i):num_elec*(i+1), 1:num_part]
num_elec <- 5
nl.ordered[(1+num_elec*i):num_elec*(i+1), 1:num_part]
i <- 0
nl.ordered[(1+num_elec*i):num_elec*(i+1), 1:num_part]
(0:n/m-1)
n/m
-1
n/m-1
0:n/m-1
seq(0,n/m-1)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
x <- t(df[(1 + num_elec*i):num_elec*(i+1), 1:num_part])
print(x)
z <- x %*% w
X[i,] <- t(z)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
print(i)
x <- t(df[(1 + num_elec*i):num_elec*(i+1), 1:num_part])
print(x)
z <- x %*% w
X[i,] <- t(z)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
print(i)
x <- t(df[(1 + num_elec*i):num_elec*(i+1), 1:num_part])
print(x)
z <- x %*% w
print(z)
X[i,] <- t(z)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
z
?norm
x
norm(x)
x/norm(x)
x/norm(x)*100
sum(x/norm(x)*100)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
print(i)
x <- t(df[(1 + num_elec*i):(num_elec*(i+1)), 1:num_part])
print(x)
z <- x %*% w
print(z)
X[i,] <- t(z/norm(z)*100)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
# print(i)
x <- t(df[(1 + num_elec*i):(num_elec*(i+1)), 1:num_part])
# print(x)
z <- x %*% w
# print(z)
X[i,] <- t(z/norm(z)*100)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
# print(i)
x <- t(df[(1 + num_elec*i):(num_elec*(i+1)), 1:num_part])
# print(x)
z <- x %*% w
# print(z)
X[i,] <- t(z/norm(z)*100)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
View(X)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
# print(i)
x <- t(df[(1 + num_elec*i):(num_elec*(i+1)), 1:num_part])
# print(x)
z <- x %*% w
# print(z)
X[i,] <- t(z/norm(z)*100)
}
return(tibble(X))
}
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
# print(i)
x <- t(df[(1 + num_elec*i):(num_elec*(i+1)), 1:num_part])
# print(x)
z <- x %*% w
# print(z)
X[i,] <- t(z/norm(z)*100)
}
return(tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
multiplica_data_frames <- function(df, pesos, num_part, num_elec){
m <- length(w)
n <- dim(df)[1]
X <- matrix(0L, nrow = n/m, ncol = num_part)
colnames(X) <- names(df)[1:num_part]
for(i in seq(0,n/m-1)){
# print(i)
x <- t(df[(1 + num_elec*i):(num_elec*(i+1)), 1:num_part])
# print(x)
z <- x %*% w
# print(z)
X[i,] <- t(z/norm(z)*100)
}
return(as_tibble(X))
}
X <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
View(X)
temp <- multiplica_data_frames(nl.matrix, pesos = w, num_part = 6, num_elec = 5)
nl.afinidad <- tibble(SECCION = unique(nl.matrix$SECCION), temp)
nl.afinidad <- add_column(as_tiblle(temp), SECCION = unique(nl.matrix$SECCION))
nl.afinidad <- add_column(temp, SECCION = unique(nl.matrix$SECCION))
nl.afinidad
apply(temp, 1, sum)
write.csv(nl.afinidad "nuevo_leon_afinidad_partido.csv", row.names = FALSE)
write.csv(nl.afinidad, "nuevo_leon_afinidad_partido.csv", row.names = FALSE)
install.packages("FactoMineR")
library(FactoMineR)
# An치lisis de Componentes Principales para el 칤ndice
cp <- PCA(scale(nl.afinidad[,-7], scale = escala), graph = FALSE)
# An치lisis de Componentes Principales para el 칤ndice
escala <- FALSE
cp <- PCA(scale(nl.afinidad[,-7], scale = escala), scale.unit = escala,
graph = TRUE)
cp$eig
par(mfrow = c(1,2))
plot(cp, axes = c(1, 2), choix = "ind",
title = "Componentes 1 y 2")
plot(cp, axes = c(3, 4), choix = "ind",
title = "Componentes 3 y 4")
cp$ind$coord
dim(cp$ind$coord)
View(cp)
View(nl.afinidad)
nl.afinidad[,-7]
nl.afinidad[,-8]
nl.afinidad[,-7]
cp <- PCA(scale(nl.afinidad[,-7], scale = escala), scale.unit = escala,
graph = TRUE)
dim(cp$ind$coord)
indice <- cp$ind$coord[,1]
indice <- indice - min(indice) + 1
indice <- log(indice)
indice <- indice/max(indice)
hist(indice, col = "steelblue", breaks = 20)
dim(cp$ind$coord)
indice <- cp$ind$coord[,2]
indice <- indice - min(indice) + 1
indice <- log(indice)
indice <- indice/max(indice)
hist(indice, col = "steelblue", breaks = 20)
indice <- cp$ind$coord[,3]
indice <- indice - min(indice) + 1
indice <- log(indice)
indice <- indice/max(indice)
hist(indice, col = "steelblue", breaks = 20)
indice <- cp$ind$coord[,1]
indice <- indice - min(indice) + 1
indice <- log(indice)
indice <- indice/max(indice)
hist(indice, col = "steelblue", breaks = 20)
nl.final <- add_column(nl.afinidad, indice)
nl.final
indice <- indice/max(indice)*100
hist(indice, col = "steelblue", breaks = 20)
nl.final <- add_column(nl.afinidad, indice)
nl.final
nl.final <- add_column(nl.afinidad, INDICE = indice)
nl.final <- order(nl.final, INDICE)
nl.final <- add_column(nl.afinidad, INDICE = indice)
nl.final
nl.final <- order(nl.final, INDICE)
nl.final <- arrange(nl.final, INDICE)
nl.final
nl.final <- arrange(nl.final, INDICE, desc())
nl.final <- arrange(nl.final, desc(INDICE))
nl.final
write.csv(nl.final, "indice_nuevo_leon.csv", rownames = FALSE)
write.csv(nl.final, "indice_nuevo_leon.csv", row.names = FALSE)
dim(cp$ind$coord)
cp$ind
cp$eig
# An치lisis de Componentes Principales para el 칤ndice
escala <- TRUE
cp <- PCA(scale(nl.afinidad[,-7], scale = escala), scale.unit = escala,
graph = TRUE)
cp$eig
# solo necesitamos la primera coordenada y con esa nos sale el 칤ndice
indice <- cp$ind$coord[,1]
indice <- log(indice)
indice <- indice/max(indice)*100
indice <- indice - min(indice) + 1
hist(indice, col = "steelblue", breaks = 20)
# An치lisis de Componentes Principales para el 칤ndice
# No vale la pena escalarlos porque ya est치n todos en la misma escala, solo se necesitan centrar
escala <- TRUE
cp <- PCA(scale(nl.afinidad[,-7], scale = escala), scale.unit = escala,
graph = TRUE)
cp$eig #La primera coordenada explica el 80% de la variablidad de tus datosk
# solo necesitamos la primera coordenada y con esa nos sale el 칤ndice
indice <- cp$ind$coord[,1]
indice <- indice - min(indice) + 1
indice <- log(indice)
indice <- indice/max(indice)*100
hist(indice, col = "steelblue", breaks = 20)
nl.final <- add_column(nl.afinidad, INDICE = indice)
nl.final <- arrange(nl.final, desc(INDICE))
nl.final
# PAN, PRI, PRD, PNA, PT, PVEM
grafica_partidos(nl.ordered,943)
grafica_partidos(nl.ordered,100)
grafica_partidos(nl.ordered,349)
grafica_partidos(nl.ordered,1951)
nl.final[which(nl.final$SECCION = 943),]
nl.final[which(nl.final$SECCION == 943),]
nl.final[which(nl.final$SECCION == 1951),]
# An치lisis de Componentes Principales para el 칤ndice
# No vale la pena escalarlos porque ya est치n todos en la misma escala, solo se necesitan centrar
escala <- FALSE
cp <- PCA(scale(nl.afinidad[,-7], scale = escala), scale.unit = escala,
graph = TRUE)
# solo necesitamos la primera coordenada y con esa nos sale el 칤ndice
indice <- cp$ind$coord[,1]
indice <- indice - min(indice) + 1
indice <- log(indice)
indice <- indice/max(indice)*100
hist(indice, col = "steelblue", breaks = 20)
nl.final <- add_column(nl.afinidad, INDICE = indice)
nl.final <- arrange(nl.final, desc(INDICE))
nl.final
nl.final[which(nl.final$SECCION == 1951),]
nl.final[which(nl.final$SECCION == 349),]
# solo necesitamos la primera coordenada y con esa nos sale el 칤ndice
indice <- cp$ind$coord[,1]
indice <- indice - min(indice) + 1
# indice <- log(indice)
indice <- indice/max(indice)*100
hist(indice, col = "steelblue", breaks = 20)
nl.final <- add_column(nl.afinidad, INDICE = indice)
nl.final <- arrange(nl.final, desc(INDICE))
nl.final
nl.final[which(nl.final$SECCION == 1951),]
nl.final[which(nl.final$SECCION == 349),]
nl.final[which(nl.final$SECCION == 100),]
nl.final[which(nl.final$SECCION == 943),]
write.csv(nl.final, "indice_nuevo_leon.csv", row.names = FALSE)
indice2 <- -0.04*(indice - 50)^2 + 100
nl.final <- add_column(nl.afinidad, INDICE_PAN_PRI = indice, INDICE_VOLATILIDAD)
# Una linda normal :)
hist(indice, col = "steelblue", breaks = 20)
nl.final <- add_column(nl.afinidad, INDICE_PAN_PRI = indice, INDICE_VOLATILIDAD)
nl.final <- add_column(nl.afinidad, INDICE_PAN_PRI = indice, INDICE_VOLATILIDAD = indice)
nl.final
nl.final <- add_column(nl.afinidad, INDICE_PAN_PRI = indice, INDICE_VOLATILIDAD = indice2)
nl.final <- arrange(nl.final, desc(INDICE))
nl.final
write.csv(nl.final, "indice_nuevo_leon.csv", row.names = FALSE)
# Una linda normal :)
hist(indice2, col = "steelblue", breaks = 20)
# Una linda normal :)
hist(indice2, col = "steelblue", breaks = 50)
